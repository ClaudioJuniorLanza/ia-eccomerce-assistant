"""
Teste de integra√ß√£o para o sistema de detec√ß√£o autom√°tica de mudan√ßas.
Valida a integra√ß√£o completa com cache e monitoramento.
"""

import os
import sys
import time
import tempfile
import shutil
from dotenv import load_dotenv

# Carrega vari√°veis de ambiente
load_dotenv()

# Adiciona o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from monitoring.change_detector import KnowledgeBaseMonitor, ChangeType
from cache.intelligent_cache import intelligent_cache

def test_change_detection_integration():
    """Testa a integra√ß√£o completa do sistema de detec√ß√£o de mudan√ßas."""
    print("üîç Testando integra√ß√£o do sistema de detec√ß√£o autom√°tica de mudan√ßas...")
    
    try:
        # Cria diret√≥rio tempor√°rio para teste
        temp_dir = tempfile.mkdtemp()
        test_dir = os.path.join(temp_dir, "test_knowledge_base")
        os.makedirs(test_dir, exist_ok=True)
        
        print(f"‚úÖ Diret√≥rio de teste criado: {test_dir}")
        
        # Cria arquivos de teste
        test_files = {
            "adr_001.md": "# ADR 001: Arquitetura Hexagonal\n\n## Contexto\nProjeto de e-commerce.",
            "ddd_concepts.md": "# DDD Concepts\n\n## Agregados\nClusters de objetos de dom√≠nio.",
            "implementation_guide.md": "# Guia de Implementa√ß√£o\n\n## Passo 1\nConfigure o projeto."
        }
        
        for filename, content in test_files.items():
            file_path = os.path.join(test_dir, filename)
            with open(file_path, 'w') as f:
                f.write(content)
        
        print(f"‚úÖ {len(test_files)} arquivos de teste criados")
        
        # Inicializa monitor
        monitor = KnowledgeBaseMonitor(
            base_paths=[test_dir],
            cache_manager=intelligent_cache,
            check_interval=5  # 5 segundos para teste
        )
        
        print("‚úÖ Monitor inicializado")
        
        # Verifica estado inicial
        initial_stats = monitor.get_monitoring_stats()
        print(f"üìä Estado inicial: {initial_stats['monitored_files']} arquivos monitorados")
        
        # Testa detec√ß√£o de mudan√ßas
        print("\nüß™ Testando detec√ß√£o de mudan√ßas...")
        
        # 1. Modifica arquivo existente
        adr_file = os.path.join(test_dir, "adr_001.md")
        with open(adr_file, 'w') as f:
            f.write("# ADR 001: Arquitetura Hexagonal\n\n## Contexto\nProjeto de e-commerce MODIFICADO.")
        
        print("üìù Arquivo ADR modificado")
        
        # For√ßa verifica√ß√£o
        changes = monitor.force_check()
        
        if changes:
            print(f"‚úÖ {len(changes)} mudan√ßas detectadas:")
            for change in changes:
                print(f"  - {change.description} ({change.change_type.value})")
        else:
            print("‚ö†Ô∏è  Nenhuma mudan√ßa detectada")
        
        # 2. Adiciona novo arquivo
        new_file = os.path.join(test_dir, "new_adr.md")
        with open(new_file, 'w') as f:
            f.write("# ADR 002: Novas Decis√µes\n\n## Contexto\nNovas decis√µes arquiteturais.")
        
        print("üìÑ Novo arquivo ADR criado")
        
        # For√ßa verifica√ß√£o
        changes = monitor.force_check()
        
        if changes:
            print(f"‚úÖ {len(changes)} mudan√ßas detectadas:")
            for change in changes:
                print(f"  - {change.description} ({change.change_type.value})")
        else:
            print("‚ö†Ô∏è  Nenhuma mudan√ßa detectada")
        
        # 3. Remove arquivo
        ddd_file = os.path.join(test_dir, "ddd_concepts.md")
        os.remove(ddd_file)
        
        print("üóëÔ∏è  Arquivo DDD removido")
        
        # For√ßa verifica√ß√£o
        changes = monitor.force_check()
        
        if changes:
            print(f"‚úÖ {len(changes)} mudan√ßas detectadas:")
            for change in changes:
                print(f"  - {change.description} ({change.change_type.value})")
        else:
            print("‚ö†Ô∏è  Nenhuma mudan√ßa detectada")
        
        # Testa hist√≥rico de mudan√ßas
        print("\nüìà Testando hist√≥rico de mudan√ßas...")
        
        history = monitor.get_change_history()
        print(f"Total de mudan√ßas registradas: {len(history)}")
        
        if history:
            print("√öltimas mudan√ßas:")
            for i, change in enumerate(history[-3:], 1):
                print(f"  {i}. {change.description} ({change.timestamp.strftime('%H:%M:%S')})")
        
        # Testa estat√≠sticas finais
        print("\nüìä Estat√≠sticas finais:")
        
        final_stats = monitor.get_monitoring_stats()
        print(f"Arquivos monitorados: {final_stats['monitored_files']}")
        print(f"Total de mudan√ßas: {final_stats['total_changes']}")
        print(f"Monitoramento ativo: {final_stats['monitoring_active']}")
        
        # Testa integra√ß√£o com cache
        print("\nüíæ Testando integra√ß√£o com cache...")
        
        # Adiciona algumas entradas ao cache
        intelligent_cache.put(
            query="Como est√° a arquitetura hexagonal?",
            response="A arquitetura hexagonal est√° bem estruturada.",
            query_type="architecture",
            prompt_template="test",
            tokens_used=50,
            cost_estimate=0.001
        )
        
        cache_stats_before = intelligent_cache.get_cache_stats()
        print(f"Cache antes: {cache_stats_before.get('total_entries', 0)} entradas")
        
        # Modifica arquivo ADR para invalidar cache
        with open(adr_file, 'w') as f:
            f.write("# ADR 001: Arquitetura Hexagonal\n\n## Contexto\nProjeto de e-commerce FINAL.")
        
        monitor.force_check()
        
        cache_stats_after = intelligent_cache.get_cache_stats()
        print(f"Cache depois: {cache_stats_after.get('total_entries', 0)} entradas")
        
        # Para monitoramento
        monitor.stop_monitoring()
        print("‚úÖ Monitoramento parado")
        
        # Limpa arquivos tempor√°rios
        shutil.rmtree(temp_dir)
        print("‚úÖ Arquivos tempor√°rios removidos")
        
        print("\nüéâ Teste de integra√ß√£o conclu√≠do com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_change_detection_integration()
    sys.exit(0 if success else 1) 