"""
Teste b√°sico da base de dados robusta.
Testa apenas a funcionalidade de retry e health check sem opera√ß√µes que dependam de embeddings.
"""

import os
import sys
from dotenv import load_dotenv

# Carrega vari√°veis de ambiente
load_dotenv()

# Adiciona o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.robust_vector_db import get_robust_vector_database

def test_robust_database_basic():
    """Testa a base de dados robusta com opera√ß√µes b√°sicas."""
    print("üîç Testando base de dados robusta (opera√ß√µes b√°sicas)...")
    
    try:
        # Cria inst√¢ncia da base robusta
        robust_db = get_robust_vector_database()
        print("‚úÖ Base de dados robusta criada com sucesso")
        
        # Testa health check
        print("\nüìä Verificando health check...")
        health_status = robust_db.health_check()
        
        print(f"Status: {health_status['status']}")
        print(f"Conex√£o: {health_status['connection']}")
        print(f"N√∫mero de cole√ß√µes: {health_status['collections_count']}")
        
        if health_status['status'] == 'healthy':
            print("‚úÖ Base de dados est√° saud√°vel")
        else:
            print(f"‚ö†Ô∏è  Base de dados com problemas: {health_status.get('error', 'Erro desconhecido')}")
        
        # Testa opera√ß√µes b√°sicas
        print("\nüß™ Testando opera√ß√µes b√°sicas...")
        
        # Lista cole√ß√µes
        collections = robust_db.list_collections()
        print(f"Cole√ß√µes existentes: {collections}")
        
        # Testa cria√ß√£o de cole√ß√£o
        test_collection = "test_collection_basic"
        collection = robust_db.get_or_create_collection(test_collection, {"description": "Cole√ß√£o de teste b√°sico"})
        print(f"‚úÖ Cole√ß√£o '{test_collection}' criada/obtida com sucesso")
        
        # Testa obten√ß√£o de informa√ß√µes da cole√ß√£o
        collection_info = robust_db.get_collection_info(test_collection)
        print(f"‚úÖ Informa√ß√µes da cole√ß√£o: {collection_info}")
        
        # Testa opera√ß√µes de m√©tricas
        print("\nüìà Testando m√©tricas...")
        
        # Reseta m√©tricas
        robust_db.reset_metrics()
        print("‚úÖ M√©tricas resetadas")
        
        # Exibe m√©tricas iniciais
        metrics = robust_db.get_metrics()
        print("M√©tricas iniciais:")
        for key, value in metrics.items():
            if isinstance(value, float):
                print(f"  {key}: {value:.2f}")
            else:
                print(f"  {key}: {value}")
        
        # Testa opera√ß√£o simples
        def test_operation():
            return "success"
        
        result = robust_db.retry_operation(test_operation)
        print(f"‚úÖ Opera√ß√£o de teste executada: {result}")
        
        # Exibe m√©tricas ap√≥s opera√ß√£o
        metrics_after = robust_db.get_metrics()
        print("M√©tricas ap√≥s opera√ß√£o:")
        for key, value in metrics_after.items():
            if isinstance(value, float):
                print(f"  {key}: {value:.2f}")
            else:
                print(f"  {key}: {value}")
        
        # Limpa cole√ß√£o de teste
        robust_db.delete_collection(test_collection)
        print(f"‚úÖ Cole√ß√£o '{test_collection}' removida")
        
        print("\nüéâ Teste b√°sico da base de dados robusta conclu√≠do com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_robust_database_basic()
    sys.exit(0 if success else 1) 